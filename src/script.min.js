const namePointer = document.querySelectorAll(".name-pointer"),
  sketchTool = document.querySelectorAll(".sketch-tool"),
  contact = document.querySelectorAll(".contact"),
  canvas = document.querySelector("#draw"),
  screenshot = document.querySelector(".screenshot"),
  screenshotViewer = document.querySelector(".screenshot-viewer"),
  dwnld = document.querySelector(".dwnld-img"),
  colorPicker = document.querySelector("#color-picker"),
  popup = document.querySelector("#popup1"),
  signForm = document.querySelector(".sign-form"),
  signOnSketch = document.querySelector(".sign-on-sketch");

// handling namepointer
const mouseHover = (tool) => {
  tool.addEventListener("mouseover", (e) => {
    e.currentTarget.firstElementChild.nextElementSibling.classList.remove(
      "hidden"
    );
  });
};

const mouseOut = (tool) => {
  tool.addEventListener("mouseout", (e) => {
    e.currentTarget.firstElementChild.nextElementSibling.classList.add(
      "hidden"
    );
  });
};
sketchTool.forEach((tool) => {
  mouseHover(tool);
  mouseOut(tool);
});

// handling contacts
const clickContact = (con) => {
  con.addEventListener("click", (e) => {
    e.currentTarget.classList.toggle("active");
    disableOtherActiveContact(e);
  });
};
contact.forEach((con) => {
  clickContact(con);
});

// disabling functions
const disableOtherActiveTool = (e) => {
  sketchTool.forEach((tool) => {
    if (tool != e.currentTarget) {
      tool.classList.remove("active");
    }
  });
};

const disableOtherActiveContact = (e) => {
  contact.forEach((tool) => {
    if (tool != e.currentTarget) {
      tool.classList.remove("active");
    }
  });
};

//getters
const getSignature = (e) => {
  e.preventDefault();
  signOnSketch.classList.toggle("hidden");
  signOnSketch.innerHTML = `${e.currentTarget.firstElementChild.value}`;
};

const getInputColor = () => {
  return colorPicker.value;
};

// screenshots functions
const getScreenShot = (imageURL) => {
  if (imageURL) {
    dwnld.href = imageURL;
    dwnld.download = `sketch-img-${Date.now()}.png`;
    dwnld.classList.toggle("hidden");
    console.log(dwnld.href);
    screenshotViewer.innerHTML += `<img class="rounded-md" src="${imageURL}" alt="screenshot image">`;
  } else {
    alert("Not able to get screesnshot,Try Again!!!");
  }
};
const fetchingImage = async () => {
  screenshotViewer.classList.toggle("hidden");
  const canva = await html2canvas(document.body);
  // console.log(canva);
  const imageURL = canva.toDataURL();
  getScreenShot(imageURL);
};

// handling main function sketch tools
sketchTool[0].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  tool(magicDraw);
});

sketchTool[1].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  tool(selectDraw);
});

sketchTool[2].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  tool(pencilDraw);
});

sketchTool[3].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  tool(rollerDraw);
});

signForm.addEventListener("submit", getSignature);

sketchTool[6].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  fetchingImage();
});

sketchTool[7].addEventListener("click", (e) => {
  e.currentTarget.classList.toggle("active");
  disableOtherActiveTool(e);
  reset();
});

// handling all canvas functions
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
ctx.strokeStyle = "#BADA55";
ctx.lineJoin = "round";
ctx.lineCap = "round";

let isDrawing = false;
let lastX = 0;
let lastY = 0;
let hue = 0;
let direction = true;

const magicDraw = (e) => {
  e.currentTarget.classList.add("cursor-[url(./images/magic-wand.svg),_auto]");
  if (!isDrawing) return; // stop the fn from running when they are not moused down
  console.log(e);
  ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
  ctx.beginPath();

  // start from
  ctx.moveTo(lastX, lastY);
  // go to
  ctx.lineTo(e.offsetX, e.offsetY);
  ctx.stroke();
  [lastX, lastY] = [e.offsetX, e.offsetY];

  hue++;
  if (hue >= 360) {
    hue = 0;
  }
  if (ctx.lineWidth >= 60 || ctx.lineWidth <= 1) {
    direction = !direction;
  }

  if (direction) {
    ctx.lineWidth++;
  } else {
    ctx.lineWidth--;
  }
};

const selectDraw = (e) => {
  e.currentTarget.classList.add("cursor-[url(./images/select-tool.svg),_auto]");
};

const pencilDraw = (e) => {
  let color = getInputColor();
  e.currentTarget.classList.add(
    "[cursor:url('./images/pencil-tool.svg')_1_28,_auto]"
  );

  if (!isDrawing) return; // stop the fn from running when they are not moused down
  //   console.log(e);
  ctx.strokeStyle = color;

  ctx.beginPath();
  // ctx.translate(0.5, 0.5);

  // start from
  ctx.moveTo(lastX, lastY);
  // go to
  ctx.lineTo(e.offsetX, e.offsetY);
  ctx.stroke();
  ctx.lineWidth = 2;
  [lastX, lastY] = [e.offsetX, e.offsetY];
};

const rollerDraw = (e) => {
  console.log(e);
  e.currentTarget.classList.add(
    "[cursor:url('./images/roller-tool.svg'),_auto]"
  );

  if (!isDrawing) return; // stop the fn from running when they are not moused down
  let color = getInputColor();
  ctx.strokeStyle = color;

  ctx.beginPath();
  // ctx.translate(0.5, 0.5);

  // start from
  ctx.moveTo(lastX, lastY);
  // go to
  ctx.lineTo(e.offsetX, e.offsetY);
  ctx.stroke();
  ctx.lineWidth = 100;
  [lastX, lastY] = [e.offsetX, e.offsetY];
};

const reset = () => {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
};

canvas.addEventListener("mousedown", (e) => {
  isDrawing = true;
  [lastX, lastY] = [e.offsetX, e.offsetY];
});

let canvasEvents = (draw) => {
  canvas.addEventListener("mousemove", draw);
  canvas.addEventListener("mouseup", () => (isDrawing = false));
  canvas.addEventListener("mouseout", () => (isDrawing = false));
};
let tool = (draw) => {
  canvasEvents(draw);
};
